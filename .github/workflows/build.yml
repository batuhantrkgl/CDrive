name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      platforms:
        description: 'Platforms to build (comma-separated: linux-x86_64,linux-i386,linux-arm64,linux-armhf,darwin-x86_64,darwin-arm64,windows-x86_64,windows-i386 or "all")'
        required: false
        default: 'all'
        type: string
      debug:
        description: 'Enable debug build'
        required: false
        default: false
        type: boolean

jobs:
  build:
    name: Build on ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            platform: linux-x86_64
            arch: x86_64
            deps_install: |
              sudo apt-get update
              sudo apt-get install -y build-essential libcurl4-openssl-dev libjson-c-dev
          - os: ubuntu-latest
            platform: linux-i386
            arch: i386
            deps_install: |
              sudo apt-get update
              sudo apt-get install -y build-essential gcc-multilib libc6-dev-i386
              sudo dpkg --add-architecture i386
              sudo apt-get update
              sudo apt-get install -y libcurl4-openssl-dev:i386 libjson-c-dev:i386
          - os: ubuntu-latest
            platform: linux-arm64
            arch: arm64
            deps_install: |
              sudo apt-get update
              sudo apt-get install -y build-essential gcc-aarch64-linux-gnu
              sudo apt-get install -y libcurl4-openssl-dev libjson-c-dev
          - os: ubuntu-latest
            platform: linux-armhf
            arch: armhf
            deps_install: |
              sudo apt-get update
              sudo apt-get install -y build-essential gcc-arm-linux-gnueabihf
              sudo apt-get install -y libcurl4-openssl-dev libjson-c-dev
          # macOS builds
          - os: macos-13
            platform: darwin-x86_64
            arch: x86_64
            deps_install: |
              brew install curl json-c pkg-config
          - os: macos-latest
            platform: darwin-arm64
            arch: arm64
            deps_install: |
              brew install curl json-c pkg-config
          # Windows builds
          - os: windows-latest
            platform: windows-x86_64
            arch: x86_64
            deps_install: |
              # MSYS2 will be set up separately
          - os: windows-latest
            platform: windows-i386
            arch: i386
            deps_install: |
              # MSYS2 will be set up separately
    
    steps:
    - name: Check if platform should be built
      id: should_build
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" != "workflow_dispatch" ]]; then
          echo "should_build=true" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event.inputs.platforms }}" == "all" ]]; then
          echo "should_build=true" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event.inputs.platforms }}" == *"${{ matrix.platform }}"* ]]; then
          echo "should_build=true" >> $GITHUB_OUTPUT
        else
          echo "should_build=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Checkout code
      if: steps.should_build.outputs.should_build == 'true'
      uses: actions/checkout@v4
      
    - name: Setup MSYS2 (Windows only)
      if: startsWith(matrix.platform, 'windows') && steps.should_build.outputs.should_build == 'true'
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.arch == 'i386' && 'MINGW32' || 'MINGW64' }}
        install: >-
          ${{ matrix.arch == 'i386' && 'mingw-w64-i686-gcc mingw-w64-i686-make mingw-w64-i686-curl mingw-w64-i686-json-c' || 'mingw-w64-x86_64-gcc mingw-w64-x86_64-make mingw-w64-x86_64-curl mingw-w64-x86_64-json-c' }}
      
    - name: Install dependencies (Linux/macOS)
      if: "!startsWith(matrix.platform, 'windows') && steps.should_build.outputs.should_build == 'true'"
      run: ${{ matrix.deps_install }}
      
    - name: Build (Linux x86_64)
      if: matrix.platform == 'linux-x86_64' && steps.should_build.outputs.should_build == 'true'
      run: |
        make clean
        ${{ github.event.inputs.debug == 'true' && 'make debug' || 'make' }}
        
    - name: Build (Linux i386)
      if: matrix.platform == 'linux-i386' && steps.should_build.outputs.should_build == 'true'
      run: |
        make clean
        ${{ github.event.inputs.debug == 'true' && 'make debug CFLAGS="-m32 -g -DDEBUG" LDFLAGS="-m32"' || 'make CFLAGS="-m32" LDFLAGS="-m32"' }}
        
    - name: Build (Linux ARM64)
      if: matrix.platform == 'linux-arm64' && steps.should_build.outputs.should_build == 'true'
      run: |
        make clean
        ${{ github.event.inputs.debug == 'true' && 'make debug CC=aarch64-linux-gnu-gcc' || 'make CC=aarch64-linux-gnu-gcc' }}
        
    - name: Build (Linux ARMHF)
      if: matrix.platform == 'linux-armhf' && steps.should_build.outputs.should_build == 'true'
      run: |
        make clean
        ${{ github.event.inputs.debug == 'true' && 'make debug CC=arm-linux-gnueabihf-gcc' || 'make CC=arm-linux-gnueabihf-gcc' }}
        
    - name: Build (macOS x86_64)
      if: matrix.platform == 'darwin-x86_64' && steps.should_build.outputs.should_build == 'true'
      run: |
        make clean
        export PKG_CONFIG_PATH="$(brew --prefix)/lib/pkgconfig:$PKG_CONFIG_PATH"
        CFLAGS="-arch x86_64 $(pkg-config --cflags libcurl json-c)"
        LIBS="$(pkg-config --libs libcurl json-c)"
        ${{ github.event.inputs.debug == 'true' && 'make debug CFLAGS="$CFLAGS -g -DDEBUG" LIBS="$LIBS"' || 'make CFLAGS="$CFLAGS" LIBS="$LIBS"' }}
        
    - name: Build (macOS ARM64)
      if: matrix.platform == 'darwin-arm64' && steps.should_build.outputs.should_build == 'true'
      run: |
        make clean
        export PKG_CONFIG_PATH="$(brew --prefix)/lib/pkgconfig:$PKG_CONFIG_PATH"
        CFLAGS="-arch arm64 $(pkg-config --cflags libcurl json-c)"
        LIBS="$(pkg-config --libs libcurl json-c)"
        ${{ github.event.inputs.debug == 'true' && 'make debug CFLAGS="$CFLAGS -g -DDEBUG" LIBS="$LIBS"' || 'make CFLAGS="$CFLAGS" LIBS="$LIBS"' }}
        
    - name: Build (Windows)
      if: startsWith(matrix.platform, 'windows') && steps.should_build.outputs.should_build == 'true'
      shell: msys2 {0}
      run: |
        make clean
        ${{ github.event.inputs.debug == 'true' && 'make debug' || 'make' }}
        
    - name: Test basic functionality (Linux/macOS)
      if: "!startsWith(matrix.platform, 'windows') && steps.should_build.outputs.should_build == 'true'"
      run: |
        if [ -f out/dist/cdrive ]; then
          ./out/dist/cdrive --help || echo "Help command executed"
          ./out/dist/cdrive --version || echo "Version command executed"
        elif [ -f out/dist/cdrive-debug ]; then
          ./out/dist/cdrive-debug --help || echo "Help command executed"
          ./out/dist/cdrive-debug --version || echo "Version command executed"
        else
          echo "Binary not found in expected location"
          ls -la out/dist/
        fi
        
    - name: Test basic functionality (Windows)
      if: startsWith(matrix.platform, 'windows') && steps.should_build.outputs.should_build == 'true'
      shell: msys2 {0}
      run: |
        if [ -f out/dist/cdrive.exe ]; then
          ./out/dist/cdrive.exe --help || echo "Help command executed"
          ./out/dist/cdrive.exe --version || echo "Version command executed"
        elif [ -f out/dist/cdrive-debug.exe ]; then
          ./out/dist/cdrive-debug.exe --help || echo "Help command executed"
          ./out/dist/cdrive-debug.exe --version || echo "Version command executed"
        else
          echo "Binary not found in expected location"
          ls -la out/dist/
        fi
        
    - name: Create archive (Linux/macOS)
      if: "!startsWith(matrix.platform, 'windows') && steps.should_build.outputs.should_build == 'true'"
      run: |
        mkdir -p dist
        cp out/dist/cdrive dist/ || cp out/dist/cdrive-debug dist/
        archive_name="cdrive-${{ matrix.platform }}${{ github.event.inputs.debug == 'true' && '-debug' || '' }}.tar.gz"
        cd dist && tar -czf ../$archive_name cdrive*
        
    - name: Create archive (Windows)
      if: startsWith(matrix.platform, 'windows') && steps.should_build.outputs.should_build == 'true'
      shell: bash
      run: |
        mkdir -p dist
        cp out/dist/cdrive.exe dist/ || cp out/dist/cdrive-debug.exe dist/ || cp out/dist/cdrive dist/cdrive.exe
        archive_name="cdrive-${{ matrix.platform }}${{ github.event.inputs.debug == 'true' && '-debug' || '' }}.tar.gz"
        cd dist && tar -czf ../$archive_name cdrive*
        
    - name: Upload artifacts
      if: steps.should_build.outputs.should_build == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: cdrive-${{ matrix.platform }}${{ github.event.inputs.debug == 'true' && '-debug' || '' }}
        path: cdrive-*.tar.gz
        retention-days: 30

  create-combined-artifact:
    name: Combine All Builds
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        
    - name: Combine artifacts
      run: |
        mkdir -p ./combined
        find ./artifacts -name "*.tar.gz" -exec cp {} ./combined/ \;
        ls -la ./combined/
        
    - name: Upload combined artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cdrive-all-platforms${{ github.event.inputs.debug == 'true' && '-debug' || '' }}
        path: ./combined/*.tar.gz
        retention-days: 90
